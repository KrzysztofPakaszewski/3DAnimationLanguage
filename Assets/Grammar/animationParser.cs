//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\krzys\Documents\praca\AnimationLanguage\grammar\Animation.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace anim {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class AnimationParser : Parser {
	public const int
		WAIT=1, FUNCTION=2, IF=3, ELSE=4, WHILE=5, FROM=6, AT=7, IN=8, TO=9, NUMBER_TYPE=10, 
		GROUP_TYPE=11, VECTOR_TYPE=12, OBJECT_TYPE=13, BOOLEAN_TYPE=14, SPHERE=15, 
		CUBE=16, CYLINDER=17, PLANE=18, COLOR=19, ROTATE=20, MOVE=21, TRANSFORM=22, 
		SET=23, TRUE=24, FALSE=25, LEFT_BRACE=26, RIGHT_BRACE=27, LEFT_BRACKET=28, 
		RIGHT_BRACKET=29, LEFT_PAREN=30, RIGHT_PAREN=31, SEMICOLON=32, COLON=33, 
		PAR_BEGIN=34, PAR_END=35, EQUALS=36, NOT_EQUALS=37, ADD=38, SUB=39, MUL=40, 
		DIV=41, ASSIGN=42, LT=43, GT=44, LTE=45, GTE=46, AND=47, OR=48, NOT=49, 
		NUMBER=50, VARIABLE_NAME=51, QUOTE=52, OBJECT=53, WHITE_SPACE=54, UNKNOWN=55;
	public const int
		RULE_objectInitValue = 0, RULE_vectorInitValue = 1, RULE_groupInitValue = 2, 
		RULE_actionType = 3, RULE_objectValue = 4, RULE_vectorValue = 5, RULE_numberValue = 6, 
		RULE_expression = 7, RULE_term = 8, RULE_factor = 9, RULE_variable = 10, 
		RULE_module = 11, RULE_code = 12, RULE_instruction = 13, RULE_block = 14, 
		RULE_parallel = 15, RULE_sequence = 16, RULE_command = 17, RULE_type = 18, 
		RULE_wait = 19, RULE_argument = 20, RULE_function = 21, RULE_objectAssign = 22, 
		RULE_groupAssign = 23, RULE_numberAssign = 24, RULE_vectorAssign = 25, 
		RULE_booleanAssign = 26, RULE_allValues = 27, RULE_variableAssign = 28, 
		RULE_altAssign = 29, RULE_assign = 30, RULE_comparingOperation = 31, RULE_comparing = 32, 
		RULE_altBoolean = 33, RULE_exprBoolean = 34, RULE_termBoolean = 35, RULE_factBoolean = 36, 
		RULE_booleanValue = 37, RULE_action = 38, RULE_if = 39, RULE_else = 40, 
		RULE_while = 41, RULE_argValue = 42, RULE_arguments = 43, RULE_call = 44;
	public static readonly string[] ruleNames = {
		"objectInitValue", "vectorInitValue", "groupInitValue", "actionType", 
		"objectValue", "vectorValue", "numberValue", "expression", "term", "factor", 
		"variable", "module", "code", "instruction", "block", "parallel", "sequence", 
		"command", "type", "wait", "argument", "function", "objectAssign", "groupAssign", 
		"numberAssign", "vectorAssign", "booleanAssign", "allValues", "variableAssign", 
		"altAssign", "assign", "comparingOperation", "comparing", "altBoolean", 
		"exprBoolean", "termBoolean", "factBoolean", "booleanValue", "action", 
		"if", "else", "while", "argValue", "arguments", "call"
	};

	private static readonly string[] _LiteralNames = {
		null, "'wait'", "'function'", "'if'", "'else'", "'while'", "'from'", "'at'", 
		"'in'", "'to'", "'Number'", "'Group'", "'Vector'", "'Object'", "'Bool'", 
		"'Sphere'", "'Cube'", "'Cylinder'", "'Plane'", "'Color'", "'rotate'", 
		"'move'", "'transform'", "'set'", "'true'", "'false'", "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "';'", "','", "'<>'", "'</>'", "'=='", "'!='", "'+'", 
		"'-'", "'*'", "'/'", "'='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", 
		"'!'", null, null, "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WAIT", "FUNCTION", "IF", "ELSE", "WHILE", "FROM", "AT", "IN", "TO", 
		"NUMBER_TYPE", "GROUP_TYPE", "VECTOR_TYPE", "OBJECT_TYPE", "BOOLEAN_TYPE", 
		"SPHERE", "CUBE", "CYLINDER", "PLANE", "COLOR", "ROTATE", "MOVE", "TRANSFORM", 
		"SET", "TRUE", "FALSE", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_PAREN", "RIGHT_PAREN", "SEMICOLON", "COLON", "PAR_BEGIN", "PAR_END", 
		"EQUALS", "NOT_EQUALS", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "LT", "GT", 
		"LTE", "GTE", "AND", "OR", "NOT", "NUMBER", "VARIABLE_NAME", "QUOTE", 
		"OBJECT", "WHITE_SPACE", "UNKNOWN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Animation.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnimationParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ObjectInitValueContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(AnimationParser.OBJECT, 0); }
		public ITerminalNode SPHERE() { return GetToken(AnimationParser.SPHERE, 0); }
		public ITerminalNode CYLINDER() { return GetToken(AnimationParser.CYLINDER, 0); }
		public ITerminalNode CUBE() { return GetToken(AnimationParser.CUBE, 0); }
		public ITerminalNode PLANE() { return GetToken(AnimationParser.PLANE, 0); }
		public ObjectInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInitValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterObjectInitValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitObjectInitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInitValueContext objectInitValue() {
		ObjectInitValueContext _localctx = new ObjectInitValueContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_objectInitValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPHERE) | (1L << CUBE) | (1L << CYLINDER) | (1L << PLANE) | (1L << OBJECT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorInitValueContext : ParserRuleContext {
		public NumberValueContext x;
		public NumberValueContext y;
		public NumberValueContext z;
		public ITerminalNode LEFT_BRACKET() { return GetToken(AnimationParser.LEFT_BRACKET, 0); }
		public ITerminalNode[] COLON() { return GetTokens(AnimationParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(AnimationParser.COLON, i);
		}
		public ITerminalNode RIGHT_BRACKET() { return GetToken(AnimationParser.RIGHT_BRACKET, 0); }
		public NumberValueContext[] numberValue() {
			return GetRuleContexts<NumberValueContext>();
		}
		public NumberValueContext numberValue(int i) {
			return GetRuleContext<NumberValueContext>(i);
		}
		public VectorInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorInitValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterVectorInitValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitVectorInitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorInitValueContext vectorInitValue() {
		VectorInitValueContext _localctx = new VectorInitValueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_vectorInitValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(LEFT_BRACKET);
			State = 93; _localctx.x = numberValue();
			State = 94; Match(COLON);
			State = 95; _localctx.y = numberValue();
			State = 96; Match(COLON);
			State = 97; _localctx.z = numberValue();
			State = 98; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupInitValueContext : ParserRuleContext {
		public ObjectValueContext _objectValue;
		public IList<ObjectValueContext> _args = new List<ObjectValueContext>();
		public ITerminalNode LEFT_BRACKET() { return GetToken(AnimationParser.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(AnimationParser.RIGHT_BRACKET, 0); }
		public ObjectValueContext[] objectValue() {
			return GetRuleContexts<ObjectValueContext>();
		}
		public ObjectValueContext objectValue(int i) {
			return GetRuleContext<ObjectValueContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(AnimationParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(AnimationParser.COLON, i);
		}
		public GroupInitValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupInitValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterGroupInitValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitGroupInitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupInitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupInitValueContext groupInitValue() {
		GroupInitValueContext _localctx = new GroupInitValueContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_groupInitValue);
		int _la;
		try {
			State = 115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; Match(LEFT_BRACKET);
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SPHERE) | (1L << CUBE) | (1L << CYLINDER) | (1L << PLANE) | (1L << LEFT_BRACKET) | (1L << VARIABLE_NAME) | (1L << OBJECT))) != 0)) {
					{
					State = 101; _localctx._objectValue = objectValue();
					_localctx._args.Add(_localctx._objectValue);
					}
				}

				State = 104; Match(RIGHT_BRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; Match(LEFT_BRACKET);
				State = 106; _localctx._objectValue = objectValue();
				_localctx._args.Add(_localctx._objectValue);
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 107; Match(COLON);
					State = 108; _localctx._objectValue = objectValue();
					_localctx._args.Add(_localctx._objectValue);
					}
					}
					State = 111;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COLON );
				State = 113; Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionTypeContext : ParserRuleContext {
		public ITerminalNode MOVE() { return GetToken(AnimationParser.MOVE, 0); }
		public ITerminalNode ROTATE() { return GetToken(AnimationParser.ROTATE, 0); }
		public ITerminalNode TRANSFORM() { return GetToken(AnimationParser.TRANSFORM, 0); }
		public ActionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterActionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitActionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionTypeContext actionType() {
		ActionTypeContext _localctx = new ActionTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_actionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROTATE) | (1L << MOVE) | (1L << TRANSFORM))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ObjectInitValueContext objectInitValue() {
			return GetRuleContext<ObjectInitValueContext>(0);
		}
		public GroupInitValueContext groupInitValue() {
			return GetRuleContext<GroupInitValueContext>(0);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_objectValue);
		try {
			State = 122;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; variable();
				}
				break;
			case SPHERE:
			case CUBE:
			case CYLINDER:
			case PLANE:
			case OBJECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; objectInitValue();
				}
				break;
			case LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; groupInitValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorValueContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VectorInitValueContext vectorInitValue() {
			return GetRuleContext<VectorInitValueContext>(0);
		}
		public VectorValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterVectorValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitVectorValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorValueContext vectorValue() {
		VectorValueContext _localctx = new VectorValueContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_vectorValue);
		try {
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; variable();
				}
				break;
			case LEFT_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; vectorInitValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_numberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(AnimationParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(AnimationParser.SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 131; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 141;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 139;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 134; Match(ADD);
						State = 135; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 137; Match(SUB);
						State = 138; term(0);
						}
						break;
					}
					} 
				}
				State = 143;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(AnimationParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(AnimationParser.DIV, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 145; factor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 155;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 153;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 147;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 148; Match(MUL);
						State = 149; factor();
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 150;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 151; Match(DIV);
						State = 152; factor();
						}
						break;
					}
					} 
				}
				State = 157;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(AnimationParser.NUMBER, 0); }
		public ITerminalNode SUB() { return GetToken(AnimationParser.SUB, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_factor);
		try {
			State = 166;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(NUMBER);
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(SUB);
				State = 160; Match(NUMBER);
				}
				break;
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; variable();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 162; Match(LEFT_PAREN);
				State = 163; expression(0);
				State = 164; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public CodeContext _code;
		public IList<CodeContext> _instr = new List<CodeContext>();
		public ITerminalNode Eof() { return GetToken(AnimationParser.Eof, 0); }
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 170; _localctx._code = code();
				_localctx._instr.Add(_localctx._code);
				}
				}
				State = 173;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WAIT) | (1L << FUNCTION) | (1L << IF) | (1L << WHILE) | (1L << NUMBER_TYPE) | (1L << VECTOR_TYPE) | (1L << OBJECT_TYPE) | (1L << ROTATE) | (1L << MOVE) | (1L << TRANSFORM) | (1L << LEFT_BRACE) | (1L << PAR_BEGIN) | (1L << VARIABLE_NAME))) != 0) );
			State = 175; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_code);
		try {
			State = 179;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNCTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; function();
				}
				break;
			case WAIT:
			case IF:
			case WHILE:
			case NUMBER_TYPE:
			case VECTOR_TYPE:
			case OBJECT_TYPE:
			case ROTATE:
			case MOVE:
			case TRANSFORM:
			case LEFT_BRACE:
			case PAR_BEGIN:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; instruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_instruction);
		try {
			State = 185;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LEFT_BRACE:
			case PAR_BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; block();
				}
				break;
			case WAIT:
			case NUMBER_TYPE:
			case VECTOR_TYPE:
			case OBJECT_TYPE:
			case ROTATE:
			case MOVE:
			case TRANSFORM:
			case VARIABLE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; command();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183; @if();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 184; @while();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ParallelContext parallel() {
			return GetRuleContext<ParallelContext>(0);
		}
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_block);
		try {
			State = 189;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PAR_BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; parallel();
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; sequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParallelContext : ParserRuleContext {
		public InstructionContext _instruction;
		public IList<InstructionContext> _instr = new List<InstructionContext>();
		public ITerminalNode PAR_BEGIN() { return GetToken(AnimationParser.PAR_BEGIN, 0); }
		public ITerminalNode PAR_END() { return GetToken(AnimationParser.PAR_END, 0); }
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ParallelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterParallel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitParallel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParallelContext parallel() {
		ParallelContext _localctx = new ParallelContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_parallel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(PAR_BEGIN);
			State = 195;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WAIT) | (1L << IF) | (1L << WHILE) | (1L << NUMBER_TYPE) | (1L << VECTOR_TYPE) | (1L << OBJECT_TYPE) | (1L << ROTATE) | (1L << MOVE) | (1L << TRANSFORM) | (1L << LEFT_BRACE) | (1L << PAR_BEGIN) | (1L << VARIABLE_NAME))) != 0)) {
				{
				{
				State = 192; _localctx._instruction = instruction();
				_localctx._instr.Add(_localctx._instruction);
				}
				}
				State = 197;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 198; Match(PAR_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		public InstructionContext _instruction;
		public IList<InstructionContext> _instr = new List<InstructionContext>();
		public ITerminalNode LEFT_BRACE() { return GetToken(AnimationParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(AnimationParser.RIGHT_BRACE, 0); }
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(LEFT_BRACE);
			State = 204;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WAIT) | (1L << IF) | (1L << WHILE) | (1L << NUMBER_TYPE) | (1L << VECTOR_TYPE) | (1L << OBJECT_TYPE) | (1L << ROTATE) | (1L << MOVE) | (1L << TRANSFORM) | (1L << LEFT_BRACE) | (1L << PAR_BEGIN) | (1L << VARIABLE_NAME))) != 0)) {
				{
				{
				State = 201; _localctx._instruction = instruction();
				_localctx._instr.Add(_localctx._instruction);
				}
				}
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 207; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(AnimationParser.SEMICOLON, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public WaitContext wait() {
			return GetRuleContext<WaitContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_command);
		try {
			State = 221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; assign();
				State = 210; Match(SEMICOLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; action();
				State = 213; Match(SEMICOLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; call();
				State = 216; Match(SEMICOLON);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 218; wait();
				State = 219; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode OBJECT_TYPE() { return GetToken(AnimationParser.OBJECT_TYPE, 0); }
		public ITerminalNode NUMBER_TYPE() { return GetToken(AnimationParser.NUMBER_TYPE, 0); }
		public ITerminalNode VECTOR_TYPE() { return GetToken(AnimationParser.VECTOR_TYPE, 0); }
		public ITerminalNode BOOLEAN_TYPE() { return GetToken(AnimationParser.BOOLEAN_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER_TYPE) | (1L << VECTOR_TYPE) | (1L << OBJECT_TYPE) | (1L << BOOLEAN_TYPE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitContext : ParserRuleContext {
		public ITerminalNode WAIT() { return GetToken(AnimationParser.WAIT, 0); }
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public WaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterWait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitWait(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitContext wait() {
		WaitContext _localctx = new WaitContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_wait);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(WAIT);
			State = 226; numberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; type();
			State = 229; Match(VARIABLE_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken func_name;
		public ArgumentContext _argument;
		public IList<ArgumentContext> _args = new List<ArgumentContext>();
		public SequenceContext body;
		public ITerminalNode FUNCTION() { return GetToken(AnimationParser.FUNCTION, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(AnimationParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(AnimationParser.COLON, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(FUNCTION);
			State = 232; _localctx.func_name = Match(VARIABLE_NAME);
			State = 233; Match(LEFT_PAREN);
			State = 242;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER_TYPE) | (1L << VECTOR_TYPE) | (1L << OBJECT_TYPE) | (1L << BOOLEAN_TYPE))) != 0)) {
				{
				State = 234; _localctx._argument = argument();
				_localctx._args.Add(_localctx._argument);
				State = 239;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COLON) {
					{
					{
					State = 235; Match(COLON);
					State = 236; _localctx._argument = argument();
					_localctx._args.Add(_localctx._argument);
					}
					}
					State = 241;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 244; Match(RIGHT_PAREN);
			State = 245; _localctx.body = sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAssignContext : ParserRuleContext {
		public IToken name;
		public ObjectInitValueContext value;
		public ITerminalNode OBJECT_TYPE() { return GetToken(AnimationParser.OBJECT_TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public ObjectInitValueContext objectInitValue() {
			return GetRuleContext<ObjectInitValueContext>(0);
		}
		public ObjectAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterObjectAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitObjectAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAssignContext objectAssign() {
		ObjectAssignContext _localctx = new ObjectAssignContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_objectAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(OBJECT_TYPE);
			State = 248; _localctx.name = Match(VARIABLE_NAME);
			State = 249; Match(ASSIGN);
			State = 250; _localctx.value = objectInitValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupAssignContext : ParserRuleContext {
		public IToken name;
		public GroupInitValueContext value;
		public ITerminalNode OBJECT_TYPE() { return GetToken(AnimationParser.OBJECT_TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public GroupInitValueContext groupInitValue() {
			return GetRuleContext<GroupInitValueContext>(0);
		}
		public GroupAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterGroupAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitGroupAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupAssignContext groupAssign() {
		GroupAssignContext _localctx = new GroupAssignContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_groupAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(OBJECT_TYPE);
			State = 253; _localctx.name = Match(VARIABLE_NAME);
			State = 254; Match(ASSIGN);
			State = 255; _localctx.value = groupInitValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberAssignContext : ParserRuleContext {
		public IToken name;
		public NumberValueContext value;
		public ITerminalNode NUMBER_TYPE() { return GetToken(AnimationParser.NUMBER_TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public NumberAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterNumberAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitNumberAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberAssignContext numberAssign() {
		NumberAssignContext _localctx = new NumberAssignContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_numberAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(NUMBER_TYPE);
			State = 258; _localctx.name = Match(VARIABLE_NAME);
			State = 259; Match(ASSIGN);
			State = 260; _localctx.value = numberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorAssignContext : ParserRuleContext {
		public IToken name;
		public VectorInitValueContext value;
		public ITerminalNode VECTOR_TYPE() { return GetToken(AnimationParser.VECTOR_TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public VectorInitValueContext vectorInitValue() {
			return GetRuleContext<VectorInitValueContext>(0);
		}
		public VectorAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterVectorAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitVectorAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorAssignContext vectorAssign() {
		VectorAssignContext _localctx = new VectorAssignContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_vectorAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(VECTOR_TYPE);
			State = 263; _localctx.name = Match(VARIABLE_NAME);
			State = 264; Match(ASSIGN);
			State = 265; _localctx.value = vectorInitValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAssignContext : ParserRuleContext {
		public IToken name;
		public BooleanValueContext value;
		public ITerminalNode BOOLEAN_TYPE() { return GetToken(AnimationParser.BOOLEAN_TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public BooleanAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterBooleanAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitBooleanAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAssignContext booleanAssign() {
		BooleanAssignContext _localctx = new BooleanAssignContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_booleanAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(BOOLEAN_TYPE);
			State = 268; _localctx.name = Match(VARIABLE_NAME);
			State = 269; Match(ASSIGN);
			State = 270; _localctx.value = booleanValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllValuesContext : ParserRuleContext {
		public ObjectInitValueContext objectInitValue() {
			return GetRuleContext<ObjectInitValueContext>(0);
		}
		public GroupInitValueContext groupInitValue() {
			return GetRuleContext<GroupInitValueContext>(0);
		}
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public VectorInitValueContext vectorInitValue() {
			return GetRuleContext<VectorInitValueContext>(0);
		}
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public AllValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterAllValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitAllValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllValuesContext allValues() {
		AllValuesContext _localctx = new AllValuesContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_allValues);
		try {
			State = 277;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; objectInitValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; groupInitValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; numberValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275; vectorInitValue();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276; booleanValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignContext : ParserRuleContext {
		public AllValuesContext value;
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public ITerminalNode ASSIGN() { return GetToken(AnimationParser.ASSIGN, 0); }
		public AllValuesContext allValues() {
			return GetRuleContext<AllValuesContext>(0);
		}
		public VariableAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterVariableAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitVariableAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignContext variableAssign() {
		VariableAssignContext _localctx = new VariableAssignContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_variableAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(VARIABLE_NAME);
			State = 280; Match(ASSIGN);
			State = 281; _localctx.value = allValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltAssignContext : ParserRuleContext {
		public ObjectAssignContext objectAssign() {
			return GetRuleContext<ObjectAssignContext>(0);
		}
		public GroupAssignContext groupAssign() {
			return GetRuleContext<GroupAssignContext>(0);
		}
		public NumberAssignContext numberAssign() {
			return GetRuleContext<NumberAssignContext>(0);
		}
		public VectorAssignContext vectorAssign() {
			return GetRuleContext<VectorAssignContext>(0);
		}
		public VariableAssignContext variableAssign() {
			return GetRuleContext<VariableAssignContext>(0);
		}
		public AltAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterAltAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitAltAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltAssignContext altAssign() {
		AltAssignContext _localctx = new AltAssignContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_altAssign);
		try {
			State = 288;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; objectAssign();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; groupAssign();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285; numberAssign();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; vectorAssign();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287; variableAssign();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public AltAssignContext content;
		public AltAssignContext altAssign() {
			return GetRuleContext<AltAssignContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; _localctx.content = altAssign();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparingOperationContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(AnimationParser.EQUALS, 0); }
		public ITerminalNode NOT_EQUALS() { return GetToken(AnimationParser.NOT_EQUALS, 0); }
		public ITerminalNode LT() { return GetToken(AnimationParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(AnimationParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(AnimationParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(AnimationParser.GTE, 0); }
		public ComparingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparingOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterComparingOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitComparingOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparingOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparingOperationContext comparingOperation() {
		ComparingOperationContext _localctx = new ComparingOperationContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_comparingOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << LT) | (1L << GT) | (1L << LTE) | (1L << GTE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparingContext : ParserRuleContext {
		public NumberValueContext left;
		public ComparingOperationContext op;
		public NumberValueContext right;
		public NumberValueContext[] numberValue() {
			return GetRuleContexts<NumberValueContext>();
		}
		public NumberValueContext numberValue(int i) {
			return GetRuleContext<NumberValueContext>(i);
		}
		public ComparingOperationContext comparingOperation() {
			return GetRuleContext<ComparingOperationContext>(0);
		}
		public ComparingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterComparing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitComparing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparingContext comparing() {
		ComparingContext _localctx = new ComparingContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_comparing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; _localctx.left = numberValue();
			State = 295; _localctx.op = comparingOperation();
			State = 296; _localctx.right = numberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltBooleanContext : ParserRuleContext {
		public AltBooleanContext value;
		public ITerminalNode TRUE() { return GetToken(AnimationParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(AnimationParser.FALSE, 0); }
		public ComparingContext comparing() {
			return GetRuleContext<ComparingContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(AnimationParser.NOT, 0); }
		public AltBooleanContext altBoolean() {
			return GetRuleContext<AltBooleanContext>(0);
		}
		public AltBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altBoolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterAltBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitAltBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltBooleanContext altBoolean() {
		AltBooleanContext _localctx = new AltBooleanContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_altBoolean);
		try {
			State = 304;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; Match(TRUE);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300; Match(FALSE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301; comparing();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302; Match(NOT);
				State = 303; _localctx.value = altBoolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprBooleanContext : ParserRuleContext {
		public TermBooleanContext termBoolean() {
			return GetRuleContext<TermBooleanContext>(0);
		}
		public ExprBooleanContext exprBoolean() {
			return GetRuleContext<ExprBooleanContext>(0);
		}
		public ITerminalNode OR() { return GetToken(AnimationParser.OR, 0); }
		public ExprBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprBoolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterExprBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitExprBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprBooleanContext exprBoolean() {
		return exprBoolean(0);
	}

	private ExprBooleanContext exprBoolean(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprBooleanContext _localctx = new ExprBooleanContext(_ctx, _parentState);
		ExprBooleanContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_exprBoolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 307; termBoolean(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 314;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprBooleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exprBoolean);
					State = 309;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 310; Match(OR);
					State = 311; termBoolean(0);
					}
					} 
				}
				State = 316;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermBooleanContext : ParserRuleContext {
		public FactBooleanContext factBoolean() {
			return GetRuleContext<FactBooleanContext>(0);
		}
		public TermBooleanContext termBoolean() {
			return GetRuleContext<TermBooleanContext>(0);
		}
		public ITerminalNode AND() { return GetToken(AnimationParser.AND, 0); }
		public TermBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termBoolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterTermBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitTermBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermBooleanContext termBoolean() {
		return termBoolean(0);
	}

	private TermBooleanContext termBoolean(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermBooleanContext _localctx = new TermBooleanContext(_ctx, _parentState);
		TermBooleanContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_termBoolean, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 318; factBoolean();
			}
			_ctx.stop = _input.Lt(-1);
			State = 325;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermBooleanContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_termBoolean);
					State = 320;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 321; Match(AND);
					State = 322; factBoolean();
					}
					} 
				}
				State = 327;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactBooleanContext : ParserRuleContext {
		public AltBooleanContext altBoolean() {
			return GetRuleContext<AltBooleanContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ExprBooleanContext exprBoolean() {
			return GetRuleContext<ExprBooleanContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public FactBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factBoolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterFactBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitFactBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactBooleanContext factBoolean() {
		FactBooleanContext _localctx = new FactBooleanContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_factBoolean);
		try {
			State = 334;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; altBoolean();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; variable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; Match(LEFT_PAREN);
				State = 331; exprBoolean(0);
				State = 332; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public ExprBooleanContext exprBoolean() {
			return GetRuleContext<ExprBooleanContext>(0);
		}
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_booleanValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; exprBoolean(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ActionTypeContext act;
		public ObjectValueContext target;
		public VectorValueContext prev_val;
		public VectorValueContext val;
		public NumberValueContext delay;
		public NumberValueContext time;
		public ITerminalNode TO() { return GetToken(AnimationParser.TO, 0); }
		public ITerminalNode IN() { return GetToken(AnimationParser.IN, 0); }
		public ActionTypeContext actionType() {
			return GetRuleContext<ActionTypeContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public VectorValueContext[] vectorValue() {
			return GetRuleContexts<VectorValueContext>();
		}
		public VectorValueContext vectorValue(int i) {
			return GetRuleContext<VectorValueContext>(i);
		}
		public NumberValueContext[] numberValue() {
			return GetRuleContexts<NumberValueContext>();
		}
		public NumberValueContext numberValue(int i) {
			return GetRuleContext<NumberValueContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(AnimationParser.FROM, 0); }
		public ITerminalNode AT() { return GetToken(AnimationParser.AT, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; _localctx.act = actionType();
			State = 339; _localctx.target = objectValue();
			State = 342;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM) {
				{
				State = 340; Match(FROM);
				State = 341; _localctx.prev_val = vectorValue();
				}
			}

			State = 344; Match(TO);
			State = 345; _localctx.val = vectorValue();
			State = 348;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AT) {
				{
				State = 346; Match(AT);
				State = 347; _localctx.delay = numberValue();
				}
			}

			State = 350; Match(IN);
			State = 351; _localctx.time = numberValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public BooleanValueContext if_expr;
		public SequenceContext body;
		public ElseContext else_expr;
		public ITerminalNode IF() { return GetToken(AnimationParser.IF, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(IF);
			State = 354; Match(LEFT_PAREN);
			State = 355; _localctx.if_expr = booleanValue();
			State = 356; Match(RIGHT_PAREN);
			State = 357; _localctx.body = sequence();
			State = 359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 358; _localctx.else_expr = @else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(AnimationParser.ELSE, 0); }
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_else);
		try {
			State = 365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; Match(ELSE);
				State = 362; sequence();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(ELSE);
				State = 364; @if();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public BooleanValueContext test_expr;
		public SequenceContext body;
		public ITerminalNode WHILE() { return GetToken(AnimationParser.WHILE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(WHILE);
			State = 368; Match(LEFT_PAREN);
			State = 369; _localctx.test_expr = booleanValue();
			State = 370; Match(RIGHT_PAREN);
			State = 371; _localctx.body = sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgValueContext : ParserRuleContext {
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public VectorValueContext vectorValue() {
			return GetRuleContext<VectorValueContext>(0);
		}
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public ArgValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterArgValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitArgValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgValueContext argValue() {
		ArgValueContext _localctx = new ArgValueContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_argValue);
		try {
			State = 377;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; objectValue();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; vectorValue();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; booleanValue();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; numberValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgValueContext _argValue;
		public IList<ArgValueContext> _args = new List<ArgValueContext>();
		public ArgValueContext[] argValue() {
			return GetRuleContexts<ArgValueContext>();
		}
		public ArgValueContext argValue(int i) {
			return GetRuleContext<ArgValueContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(AnimationParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(AnimationParser.COLON, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_arguments);
		int _la;
		try {
			State = 389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					State = 379; _localctx._argValue = argValue();
					_localctx._args.Add(_localctx._argValue);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382; _localctx._argValue = argValue();
				_localctx._args.Add(_localctx._argValue);
				State = 385;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 383; Match(COLON);
					State = 384; _localctx._argValue = argValue();
					_localctx._args.Add(_localctx._argValue);
					}
					}
					State = 387;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COLON );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode VARIABLE_NAME() { return GetToken(AnimationParser.VARIABLE_NAME, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(AnimationParser.LEFT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(AnimationParser.RIGHT_PAREN, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnimationListener typedListener = listener as IAnimationListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnimationVisitor<TResult> typedVisitor = visitor as IAnimationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(VARIABLE_NAME);
			State = 392; Match(LEFT_PAREN);
			State = 393; arguments();
			State = 394; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 8: return term_sempred((TermContext)_localctx, predIndex);

		case 34: return exprBoolean_sempred((ExprBooleanContext)_localctx, predIndex);

		case 35: return termBoolean_sempred((TermBooleanContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exprBoolean_sempred(ExprBooleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool termBoolean_sempred(TermBooleanContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x39\x18F\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4i\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x6\x4p\n\x4\r\x4\xE\x4q\x3\x4\x3\x4\x5\x4v\n\x4\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x5\x6}\n\x6\x3\a\x3\a\x5\a\x81\n\a\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x8E\n\t\f\t\xE\t\x91\v\t\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x9C\n\n\f\n\xE\n\x9F\v\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xA9\n\v\x3\f\x3\f\x3\r\x6\r"+
		"\xAE\n\r\r\r\xE\r\xAF\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xB6\n\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\xBC\n\xF\x3\x10\x3\x10\x5\x10\xC0\n\x10\x3\x11\x3\x11"+
		"\a\x11\xC4\n\x11\f\x11\xE\x11\xC7\v\x11\x3\x11\x3\x11\x3\x12\x3\x12\a"+
		"\x12\xCD\n\x12\f\x12\xE\x12\xD0\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\xE0\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\xF0\n\x17\f\x17\xE\x17\xF3"+
		"\v\x17\x5\x17\xF5\n\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x118\n\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x123\n\x1F"+
		"\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x133"+
		"\n#\x3$\x3$\x3$\x3$\x3$\x3$\a$\x13B\n$\f$\xE$\x13E\v$\x3%\x3%\x3%\x3%"+
		"\x3%\x3%\a%\x146\n%\f%\xE%\x149\v%\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x151\n"+
		"&\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x159\n(\x3(\x3(\x3(\x3(\x5(\x15F\n(\x3"+
		"(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x16A\n)\x3*\x3*\x3*\x3*\x5*\x170"+
		"\n*\x3+\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x5,\x17C\n,\x3-\x5-\x17F\n"+
		"-\x3-\x3-\x3-\x6-\x184\n-\r-\xE-\x185\x5-\x188\n-\x3.\x3.\x3.\x3.\x3."+
		"\x3.\x2\x2\x6\x10\x12\x46H/\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\x2\x6\x4\x2"+
		"\x11\x14\x37\x37\x3\x2\x16\x18\x4\x2\f\f\xE\x10\x4\x2&\'-\x30\x195\x2"+
		"\\\x3\x2\x2\x2\x4^\x3\x2\x2\x2\x6u\x3\x2\x2\x2\bw\x3\x2\x2\x2\n|\x3\x2"+
		"\x2\x2\f\x80\x3\x2\x2\x2\xE\x82\x3\x2\x2\x2\x10\x84\x3\x2\x2\x2\x12\x92"+
		"\x3\x2\x2\x2\x14\xA8\x3\x2\x2\x2\x16\xAA\x3\x2\x2\x2\x18\xAD\x3\x2\x2"+
		"\x2\x1A\xB5\x3\x2\x2\x2\x1C\xBB\x3\x2\x2\x2\x1E\xBF\x3\x2\x2\x2 \xC1\x3"+
		"\x2\x2\x2\"\xCA\x3\x2\x2\x2$\xDF\x3\x2\x2\x2&\xE1\x3\x2\x2\x2(\xE3\x3"+
		"\x2\x2\x2*\xE6\x3\x2\x2\x2,\xE9\x3\x2\x2\x2.\xF9\x3\x2\x2\x2\x30\xFE\x3"+
		"\x2\x2\x2\x32\x103\x3\x2\x2\x2\x34\x108\x3\x2\x2\x2\x36\x10D\x3\x2\x2"+
		"\x2\x38\x117\x3\x2\x2\x2:\x119\x3\x2\x2\x2<\x122\x3\x2\x2\x2>\x124\x3"+
		"\x2\x2\x2@\x126\x3\x2\x2\x2\x42\x128\x3\x2\x2\x2\x44\x132\x3\x2\x2\x2"+
		"\x46\x134\x3\x2\x2\x2H\x13F\x3\x2\x2\x2J\x150\x3\x2\x2\x2L\x152\x3\x2"+
		"\x2\x2N\x154\x3\x2\x2\x2P\x163\x3\x2\x2\x2R\x16F\x3\x2\x2\x2T\x171\x3"+
		"\x2\x2\x2V\x17B\x3\x2\x2\x2X\x187\x3\x2\x2\x2Z\x189\x3\x2\x2\x2\\]\t\x2"+
		"\x2\x2]\x3\x3\x2\x2\x2^_\a\x1E\x2\x2_`\x5\xE\b\x2`\x61\a#\x2\x2\x61\x62"+
		"\x5\xE\b\x2\x62\x63\a#\x2\x2\x63\x64\x5\xE\b\x2\x64\x65\a\x1F\x2\x2\x65"+
		"\x5\x3\x2\x2\x2\x66h\a\x1E\x2\x2gi\x5\n\x6\x2hg\x3\x2\x2\x2hi\x3\x2\x2"+
		"\x2ij\x3\x2\x2\x2jv\a\x1F\x2\x2kl\a\x1E\x2\x2lo\x5\n\x6\x2mn\a#\x2\x2"+
		"np\x5\n\x6\x2om\x3\x2\x2\x2pq\x3\x2\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2"+
		"rs\x3\x2\x2\x2st\a\x1F\x2\x2tv\x3\x2\x2\x2u\x66\x3\x2\x2\x2uk\x3\x2\x2"+
		"\x2v\a\x3\x2\x2\x2wx\t\x3\x2\x2x\t\x3\x2\x2\x2y}\x5\x16\f\x2z}\x5\x2\x2"+
		"\x2{}\x5\x6\x4\x2|y\x3\x2\x2\x2|z\x3\x2\x2\x2|{\x3\x2\x2\x2}\v\x3\x2\x2"+
		"\x2~\x81\x5\x16\f\x2\x7F\x81\x5\x4\x3\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2"+
		"\x2\x2\x81\r\x3\x2\x2\x2\x82\x83\x5\x10\t\x2\x83\xF\x3\x2\x2\x2\x84\x85"+
		"\b\t\x1\x2\x85\x86\x5\x12\n\x2\x86\x8F\x3\x2\x2\x2\x87\x88\f\x4\x2\x2"+
		"\x88\x89\a(\x2\x2\x89\x8E\x5\x12\n\x2\x8A\x8B\f\x3\x2\x2\x8B\x8C\a)\x2"+
		"\x2\x8C\x8E\x5\x12\n\x2\x8D\x87\x3\x2\x2\x2\x8D\x8A\x3\x2\x2\x2\x8E\x91"+
		"\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x11\x3\x2\x2"+
		"\x2\x91\x8F\x3\x2\x2\x2\x92\x93\b\n\x1\x2\x93\x94\x5\x14\v\x2\x94\x9D"+
		"\x3\x2\x2\x2\x95\x96\f\x4\x2\x2\x96\x97\a*\x2\x2\x97\x9C\x5\x14\v\x2\x98"+
		"\x99\f\x3\x2\x2\x99\x9A\a+\x2\x2\x9A\x9C\x5\x14\v\x2\x9B\x95\x3\x2\x2"+
		"\x2\x9B\x98\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E"+
		"\x3\x2\x2\x2\x9E\x13\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA9\a\x34\x2"+
		"\x2\xA1\xA2\a)\x2\x2\xA2\xA9\a\x34\x2\x2\xA3\xA9\x5\x16\f\x2\xA4\xA5\a"+
		" \x2\x2\xA5\xA6\x5\x10\t\x2\xA6\xA7\a!\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xA0"+
		"\x3\x2\x2\x2\xA8\xA1\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2\xA8\xA4\x3\x2\x2"+
		"\x2\xA9\x15\x3\x2\x2\x2\xAA\xAB\a\x35\x2\x2\xAB\x17\x3\x2\x2\x2\xAC\xAE"+
		"\x5\x1A\xE\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xAD\x3\x2\x2"+
		"\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\a\x2\x2\x3\xB2\x19"+
		"\x3\x2\x2\x2\xB3\xB6\x5,\x17\x2\xB4\xB6\x5\x1C\xF\x2\xB5\xB3\x3\x2\x2"+
		"\x2\xB5\xB4\x3\x2\x2\x2\xB6\x1B\x3\x2\x2\x2\xB7\xBC\x5\x1E\x10\x2\xB8"+
		"\xBC\x5$\x13\x2\xB9\xBC\x5P)\x2\xBA\xBC\x5T+\x2\xBB\xB7\x3\x2\x2\x2\xBB"+
		"\xB8\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\x1D\x3\x2"+
		"\x2\x2\xBD\xC0\x5 \x11\x2\xBE\xC0\x5\"\x12\x2\xBF\xBD\x3\x2\x2\x2\xBF"+
		"\xBE\x3\x2\x2\x2\xC0\x1F\x3\x2\x2\x2\xC1\xC5\a$\x2\x2\xC2\xC4\x5\x1C\xF"+
		"\x2\xC3\xC2\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6"+
		"\x3\x2\x2\x2\xC6\xC8\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9\a%\x2\x2"+
		"\xC9!\x3\x2\x2\x2\xCA\xCE\a\x1C\x2\x2\xCB\xCD\x5\x1C\xF\x2\xCC\xCB\x3"+
		"\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2"+
		"\xCF\xD1\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD2\a\x1D\x2\x2\xD2#\x3\x2"+
		"\x2\x2\xD3\xD4\x5> \x2\xD4\xD5\a\"\x2\x2\xD5\xE0\x3\x2\x2\x2\xD6\xD7\x5"+
		"N(\x2\xD7\xD8\a\"\x2\x2\xD8\xE0\x3\x2\x2\x2\xD9\xDA\x5Z.\x2\xDA\xDB\a"+
		"\"\x2\x2\xDB\xE0\x3\x2\x2\x2\xDC\xDD\x5(\x15\x2\xDD\xDE\a\"\x2\x2\xDE"+
		"\xE0\x3\x2\x2\x2\xDF\xD3\x3\x2\x2\x2\xDF\xD6\x3\x2\x2\x2\xDF\xD9\x3\x2"+
		"\x2\x2\xDF\xDC\x3\x2\x2\x2\xE0%\x3\x2\x2\x2\xE1\xE2\t\x4\x2\x2\xE2\'\x3"+
		"\x2\x2\x2\xE3\xE4\a\x3\x2\x2\xE4\xE5\x5\xE\b\x2\xE5)\x3\x2\x2\x2\xE6\xE7"+
		"\x5&\x14\x2\xE7\xE8\a\x35\x2\x2\xE8+\x3\x2\x2\x2\xE9\xEA\a\x4\x2\x2\xEA"+
		"\xEB\a\x35\x2\x2\xEB\xF4\a \x2\x2\xEC\xF1\x5*\x16\x2\xED\xEE\a#\x2\x2"+
		"\xEE\xF0\x5*\x16\x2\xEF\xED\x3\x2\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3"+
		"\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2"+
		"\xF4\xEC\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\a"+
		"!\x2\x2\xF7\xF8\x5\"\x12\x2\xF8-\x3\x2\x2\x2\xF9\xFA\a\xF\x2\x2\xFA\xFB"+
		"\a\x35\x2\x2\xFB\xFC\a,\x2\x2\xFC\xFD\x5\x2\x2\x2\xFD/\x3\x2\x2\x2\xFE"+
		"\xFF\a\xF\x2\x2\xFF\x100\a\x35\x2\x2\x100\x101\a,\x2\x2\x101\x102\x5\x6"+
		"\x4\x2\x102\x31\x3\x2\x2\x2\x103\x104\a\f\x2\x2\x104\x105\a\x35\x2\x2"+
		"\x105\x106\a,\x2\x2\x106\x107\x5\xE\b\x2\x107\x33\x3\x2\x2\x2\x108\x109"+
		"\a\xE\x2\x2\x109\x10A\a\x35\x2\x2\x10A\x10B\a,\x2\x2\x10B\x10C\x5\x4\x3"+
		"\x2\x10C\x35\x3\x2\x2\x2\x10D\x10E\a\x10\x2\x2\x10E\x10F\a\x35\x2\x2\x10F"+
		"\x110\a,\x2\x2\x110\x111\x5L\'\x2\x111\x37\x3\x2\x2\x2\x112\x118\x5\x2"+
		"\x2\x2\x113\x118\x5\x6\x4\x2\x114\x118\x5\xE\b\x2\x115\x118\x5\x4\x3\x2"+
		"\x116\x118\x5L\'\x2\x117\x112\x3\x2\x2\x2\x117\x113\x3\x2\x2\x2\x117\x114"+
		"\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x116\x3\x2\x2\x2\x118\x39\x3\x2"+
		"\x2\x2\x119\x11A\a\x35\x2\x2\x11A\x11B\a,\x2\x2\x11B\x11C\x5\x38\x1D\x2"+
		"\x11C;\x3\x2\x2\x2\x11D\x123\x5.\x18\x2\x11E\x123\x5\x30\x19\x2\x11F\x123"+
		"\x5\x32\x1A\x2\x120\x123\x5\x34\x1B\x2\x121\x123\x5:\x1E\x2\x122\x11D"+
		"\x3\x2\x2\x2\x122\x11E\x3\x2\x2\x2\x122\x11F\x3\x2\x2\x2\x122\x120\x3"+
		"\x2\x2\x2\x122\x121\x3\x2\x2\x2\x123=\x3\x2\x2\x2\x124\x125\x5<\x1F\x2"+
		"\x125?\x3\x2\x2\x2\x126\x127\t\x5\x2\x2\x127\x41\x3\x2\x2\x2\x128\x129"+
		"\x5\xE\b\x2\x129\x12A\x5@!\x2\x12A\x12B\x5\xE\b\x2\x12B\x43\x3\x2\x2\x2"+
		"\x12C\x133\x3\x2\x2\x2\x12D\x133\a\x1A\x2\x2\x12E\x133\a\x1B\x2\x2\x12F"+
		"\x133\x5\x42\"\x2\x130\x131\a\x33\x2\x2\x131\x133\x5\x44#\x2\x132\x12C"+
		"\x3\x2\x2\x2\x132\x12D\x3\x2\x2\x2\x132\x12E\x3\x2\x2\x2\x132\x12F\x3"+
		"\x2\x2\x2\x132\x130\x3\x2\x2\x2\x133\x45\x3\x2\x2\x2\x134\x135\b$\x1\x2"+
		"\x135\x136\x5H%\x2\x136\x13C\x3\x2\x2\x2\x137\x138\f\x3\x2\x2\x138\x139"+
		"\a\x32\x2\x2\x139\x13B\x5H%\x2\x13A\x137\x3\x2\x2\x2\x13B\x13E\x3\x2\x2"+
		"\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13DG\x3\x2\x2\x2\x13E"+
		"\x13C\x3\x2\x2\x2\x13F\x140\b%\x1\x2\x140\x141\x5J&\x2\x141\x147\x3\x2"+
		"\x2\x2\x142\x143\f\x3\x2\x2\x143\x144\a\x31\x2\x2\x144\x146\x5J&\x2\x145"+
		"\x142\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148"+
		"\x3\x2\x2\x2\x148I\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x151\x5\x44"+
		"#\x2\x14B\x151\x5\x16\f\x2\x14C\x14D\a \x2\x2\x14D\x14E\x5\x46$\x2\x14E"+
		"\x14F\a!\x2\x2\x14F\x151\x3\x2\x2\x2\x150\x14A\x3\x2\x2\x2\x150\x14B\x3"+
		"\x2\x2\x2\x150\x14C\x3\x2\x2\x2\x151K\x3\x2\x2\x2\x152\x153\x5\x46$\x2"+
		"\x153M\x3\x2\x2\x2\x154\x155\x5\b\x5\x2\x155\x158\x5\n\x6\x2\x156\x157"+
		"\a\b\x2\x2\x157\x159\x5\f\a\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2"+
		"\x2\x159\x15A\x3\x2\x2\x2\x15A\x15B\a\v\x2\x2\x15B\x15E\x5\f\a\x2\x15C"+
		"\x15D\a\t\x2\x2\x15D\x15F\x5\xE\b\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3"+
		"\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\a\n\x2\x2\x161\x162\x5\xE\b"+
		"\x2\x162O\x3\x2\x2\x2\x163\x164\a\x5\x2\x2\x164\x165\a \x2\x2\x165\x166"+
		"\x5L\'\x2\x166\x167\a!\x2\x2\x167\x169\x5\"\x12\x2\x168\x16A\x5R*\x2\x169"+
		"\x168\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16AQ\x3\x2\x2\x2\x16B\x16C\a"+
		"\x6\x2\x2\x16C\x170\x5\"\x12\x2\x16D\x16E\a\x6\x2\x2\x16E\x170\x5P)\x2"+
		"\x16F\x16B\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x170S\x3\x2\x2\x2\x171\x172"+
		"\a\a\x2\x2\x172\x173\a \x2\x2\x173\x174\x5L\'\x2\x174\x175\a!\x2\x2\x175"+
		"\x176\x5\"\x12\x2\x176U\x3\x2\x2\x2\x177\x17C\x5\n\x6\x2\x178\x17C\x5"+
		"\f\a\x2\x179\x17C\x5L\'\x2\x17A\x17C\x5\xE\b\x2\x17B\x177\x3\x2\x2\x2"+
		"\x17B\x178\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17A\x3\x2\x2\x2\x17C"+
		"W\x3\x2\x2\x2\x17D\x17F\x5V,\x2\x17E\x17D\x3\x2\x2\x2\x17E\x17F\x3\x2"+
		"\x2\x2\x17F\x188\x3\x2\x2\x2\x180\x183\x5V,\x2\x181\x182\a#\x2\x2\x182"+
		"\x184\x5V,\x2\x183\x181\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x183\x3"+
		"\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x188\x3\x2\x2\x2\x187\x17E\x3\x2"+
		"\x2\x2\x187\x180\x3\x2\x2\x2\x188Y\x3\x2\x2\x2\x189\x18A\a\x35\x2\x2\x18A"+
		"\x18B\a \x2\x2\x18B\x18C\x5X-\x2\x18C\x18D\a!\x2\x2\x18D[\x3\x2\x2\x2"+
		"#hqu|\x80\x8D\x8F\x9B\x9D\xA8\xAF\xB5\xBB\xBF\xC5\xCE\xDF\xF1\xF4\x117"+
		"\x122\x132\x13C\x147\x150\x158\x15E\x169\x16F\x17B\x17E\x185\x187";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace anim
